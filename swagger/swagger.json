{
    "swagger": "2.0",
    "info": {
        "title": "beego Test API",
        "description": "beego has a very cool tools to autogenerate documents for your API",
        "version": "1.0.0",
        "termsOfService": "http://beego.me/",
        "contact": {
            "email": "astaxie@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        }
    },
    "basePath": "/v1",
    "paths": {
        "/game/": {
            "get": {
                "tags": [
                    "game"
                ],
                "description": "get Game",
                "operationId": "GameController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Game"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "game"
                ],
                "description": "create Game",
                "operationId": "GameController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Game content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Game"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.Game"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/game/{id}": {
            "get": {
                "tags": [
                    "game"
                ],
                "description": "get Game by id",
                "operationId": "GameController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Game"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            }
        },
        "/list/": {
            "get": {
                "tags": [
                    "list"
                ],
                "description": "get List",
                "operationId": "ListController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.List"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "list"
                ],
                "description": "create List",
                "operationId": "ListController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for List content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.List"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.List"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/list/{id}": {
            "get": {
                "tags": [
                    "list"
                ],
                "description": "get List by id",
                "operationId": "ListController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.List"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            }
        },
        "/user/": {
            "get": {
                "tags": [
                    "user"
                ],
                "description": "get User",
                "operationId": "UserController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "user"
                ],
                "description": "create User",
                "operationId": "UserController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for User content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.User"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/user/{id}": {
            "get": {
                "tags": [
                    "user"
                ],
                "description": "get User by id",
                "operationId": "UserController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "user"
                ],
                "description": "update the User",
                "operationId": "UserController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for User content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.User"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "user"
                ],
                "description": "delete the User",
                "operationId": "UserController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        }
    },
    "definitions": {
        "models.Game": {
            "title": "Game",
            "type": "object",
            "properties": {
                "AboutTheGame": {
                    "type": "string"
                },
                "Achievements": {
                    "type": "string"
                },
                "Background": {
                    "type": "string"
                },
                "Categories": {
                    "type": "string"
                },
                "ContentDescriptors": {
                    "type": "string"
                },
                "Demos": {
                    "type": "string"
                },
                "DetailedDescription": {
                    "type": "string"
                },
                "Developers": {
                    "type": "string"
                },
                "DiscountPercent": {
                    "type": "integer",
                    "format": "int64"
                },
                "Dlc": {
                    "type": "string"
                },
                "FinalPrice": {
                    "type": "integer",
                    "format": "int64"
                },
                "Genres": {
                    "type": "string"
                },
                "HeaderImage": {
                    "type": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "IsFree": {
                    "type": "boolean"
                },
                "LinuxRequirements": {
                    "type": "string"
                },
                "MacRequirements": {
                    "type": "string"
                },
                "Metacritic": {
                    "type": "string"
                },
                "Movies": {
                    "type": "string"
                },
                "Name": {
                    "type": "string"
                },
                "PackageGroups": {
                    "type": "string"
                },
                "Packages": {
                    "type": "string"
                },
                "PcRequirements": {
                    "type": "string"
                },
                "Platforms": {
                    "type": "string"
                },
                "PriceOverview": {
                    "type": "string"
                },
                "Publishers": {
                    "type": "string"
                },
                "Recommendations": {
                    "type": "string"
                },
                "ReleaseDate": {
                    "type": "string"
                },
                "RequiredAge": {
                    "type": "integer",
                    "format": "int64"
                },
                "Reviews": {
                    "type": "string"
                },
                "Score": {
                    "type": "integer",
                    "format": "int64"
                },
                "Screenshots": {
                    "type": "string"
                },
                "ShortDescription": {
                    "type": "string"
                },
                "SteamAppid": {
                    "type": "integer",
                    "format": "int64"
                },
                "SupportInfo": {
                    "type": "string"
                },
                "SupportedLanguages": {
                    "type": "string"
                },
                "Type": {
                    "type": "string"
                },
                "Url": {
                    "type": "string"
                },
                "UrlList": {
                    "type": "string"
                },
                "View": {
                    "type": "integer",
                    "format": "int64"
                },
                "Website": {
                    "type": "string"
                }
            }
        },
        "models.List": {
            "title": "List",
            "type": "object",
            "properties": {
                "Appid": {
                    "type": "integer",
                    "format": "int64"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "Name": {
                    "type": "string"
                },
                "Provider": {
                    "type": "string"
                },
                "Status": {
                    "type": "boolean"
                },
                "Time": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "models.User": {
            "title": "User",
            "type": "object",
            "properties": {
                "Avatar": {
                    "type": "string"
                },
                "Avatarfull": {
                    "type": "string"
                },
                "Avatarmedium": {
                    "type": "string"
                },
                "Communityvisibilitystate": {
                    "type": "integer",
                    "format": "int64"
                },
                "Confirmation": {
                    "type": "string"
                },
                "Email": {
                    "type": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "Lastlogoff": {
                    "type": "integer",
                    "format": "int64"
                },
                "Loccityid": {
                    "type": "integer",
                    "format": "int64"
                },
                "Loccountrycode": {
                    "type": "string"
                },
                "Locstatecode": {
                    "type": "string"
                },
                "Notifications": {
                    "type": "string"
                },
                "Password": {
                    "type": "string"
                },
                "Personaname": {
                    "type": "string"
                },
                "Personastate": {
                    "type": "integer",
                    "format": "int64"
                },
                "Personastateflags": {
                    "type": "integer",
                    "format": "int64"
                },
                "Primaryclanid": {
                    "type": "string"
                },
                "Profilestate": {
                    "type": "integer",
                    "format": "int64"
                },
                "Profileurl": {
                    "type": "string"
                },
                "Realname": {
                    "type": "string"
                },
                "Steamid": {
                    "type": "string"
                },
                "Timecreated": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        }
    },
    "tags": [
        {
            "name": "game",
            "description": " GameController operations for Game\n"
        },
        {
            "name": "user",
            "description": " UserController operations for User\n"
        },
        {
            "name": "list",
            "description": " ListController operations for List\n"
        },
        {
            "name": "token",
            "description": " ListController operations for List\n"
        },
        {
            "name": "confirmation",
            "description": " ListController operations for List\n"
        }
    ]
}